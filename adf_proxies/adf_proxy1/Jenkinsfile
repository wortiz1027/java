#!/usr/bin/env groovy

/**
 *	+--------------------------------------------------------------+
 * 	|           JENKINSFILE	ADF PROXIES			                   |
 * 	|           AUTOR: @wortiz				                       |
 * 	|           EMAIL: willman.ortiz@gmail.com		               |
 * 	|           FECHA: 14-Nov-2019 15:12			               |
 *	+--------------------------------------------------------------+
 */

import groovy.json.JsonOutput

import java.util.Optional

import hudson.tasks.test.AbstractTestResultAction
import hudson.tasks.junit.CaseResult
import hudson.model.Actionable

final String BUILD_COLOR_GOOD     = "good"
final String BUILD_COLOR_WARNING  = "warning"
final String BUILD_COLOR_DANGER   = "danger"
final String BUILD_STATUS_SUCCESS = "Success"

final String NOTIFICATION_SLACK = "slack"
final String NOTIFICATION_EMAIL = "email"

def author      = ""
def message     = ""
def testSummary = ""
def total   = 0
def failed  = 0
def skipped = 0
def failedTestsString = "```"

def isPublishingBranch = { -> 
    return env.GIT_BRANCH == 'origin/master' || env.GIT_BRANCH =~ /release.+/
}

def getGitAuthor = {
 	def commit = sh(returnStdout: true, script: 'git rev-parse HEAD')
 	author = sh(returnStdout: true, script: "git --no-pager show -s --format='%an' ${commit}").trim()
}

def getLastCommitMessage = {
 	message = sh(returnStdout: true, script: 'git log -1 --pretty=%B').trim()
}

@NonCPS
def getTestSummary = { -> 
	def testAction = currentBuild.rawBuild.getAction(AbstractTestResultAction.class)
	def summary = ""

	if (testAction != null) {
		total = testAction.getTotalCount()
		failed = testAction.getFailCount()
		skipped = testAction.getSkipCount()

		summary = "Passed : ${total - failed - skipped}"
		summary = "${summary}, Failed  : ${failed}"
		summary = "${summary}, Skipped : ${skipped}"
	} else {
		summary = "No se encontraron test para ejecutar"
	}

	return summary
}

@NonCPS
def getFailedTests = { ->
	def testResultAction = currentBuild.rawBuild.getAction(AbstractTestResultAction.class)

	if (testResultAction != null) {
		def failedTests = testResultAction.getFailedTests()

		if (failedTests.size() > 9) {
			failedTests = failedTests.subList(0, 8)
		}

		for (CaseResult cr: failedTests) {
			failedTestsString = failedTestsString + "${cr.getFullDisplayName()}:\n${cr.getErrorDetails()}\n\n"
		}
		failedTestsString = failedTestsString + "```"
	}

	return failedTestsString
}

def populateGlobalVariables = {
	getLastCommitMessage()
	getGitAuthor()
	//testSummary = getTestSummary()
}

def notification(String type,
                 String status,
                 String color,
                 String text,
                 String job_name,
                 String author,
                 String testSummary,
                 String message,
                 String failedTestsString,
                 String mailto,
                 String subject,
                 String body) {
           switch (type) {
                          case "slack":
                                        slack_notification(text,
                                                           SLACK_CHANNEL,
                                                          [
                                                          [
                                                          title: "${job_name}, build #${env.BUILD_NUMBER}",
                                                          title_link: "${env.BUILD_URL}",
                                                          color: "${color}",
                                                          text: "${status}\n${author}",
                                                          "mrkdwn_in": [
                                                          "fields"
                                                          ],
                                                          fields: [
                                                          [
                                                                  title: "Branch",
                                                                  value: "${env.GIT_BRANCH}",
                                                                  short: true
                                                          ],
                                                          [
                                                                  title: "Test Results",
                                                                  value: "${testSummary}",
                                                                  short: true
                                                          ],
                                                          [
                                                                  title: "Last Commit",
                                                                  value: "${message}",
                                                                  short: false
                                                          ]
                                                          ]
                                                          ],
                                                          [
                                                                  title: "Failed Tests",
                                                                  color: "danger",
                                                                  text: "${failedTestsString}",
                                                                  "mrkdwn_in": [
                                                                    "text"
                                                                  ],
                                                          ]
                                              ])
                                        break
                          case "email":
			 		email_notification(mailto, subject, body)
                                        break
                          default: 
                                        println "default ${type} - ${status}"
 }
}

def slack_notification(text, channel, attachments) {
	def slack_data = JsonOutput.toJson([
                                            channel: channel,
                                            text: text,
                                            username: SLACK_USER,
                                            icon_url: SLACK_ICON,
                                            attachments: attachments
                                            ])

	sh "curl -v -X POST --data \'${slack_data}\' ${SLACK_URL}${SLACK_TOKEN}"
}

def email_notification(mailto, subject, body) {
	mail to: mailto,
  	subject: subject,
  	body: body
}

pipeline {
        
        agent any
        
        parameters {
            choice(
                name: 'ENVIRONMENT',
                choices:"dev\nqa\nprd",
                description: "Seleccione el ambiente a desplegar")
        }
        
 	triggers {
  		pollSCM '* * * * *'
 	}

 	tools {
  		maven 'maven_3_2_5'
  		jdk 'jdk_1_8_144'
 	}

 	environment {
  		JOB_NAME = "${env.JOB_NAME}"

		SLACK_USER    = "Jenkins";
		SLACK_CHANNEL = "#soa-devops"
		SLACK_URL     = 'https://io-devops.slack.com/services/hooks/jenkins-ci?token='
		SLACK_ICON    = 'https://wiki.jenkins-ci.org/download/attachments/2916393/logo.png'
		SLACK_TOKEN   = credentials("slack-token")
	}

 	stages {
  		stage('configuracion') {
			steps {
				script {
                                        echo "Desplegando en el ambiente ${params.ENVIRONMENT}..."
                                        def buildColor = currentBuild.result == null ? "good" : "warning"
                                        def git_url = sh(returnStdout: true, script: 'git config remote.origin.url').trim()
                                        
                                        populateGlobalVariables() 
                                        def buildStatus = currentBuild.result == null ? BUILD_STATUS_SUCCESS : currentBuild.result
                                        try {
                                              checkout scm
                                              sh 'mvn -version'
                                              sh 'mvn clean -f adf_proxy1/pom.xml -Dmaven.test.failure.ignore=true'
     					} catch (err) {
                                              buildColor = BUILD_COLOR_DANGER
                                              notification("slack",
                                                           currentBuild.result,
                                                           "danger",
                                                           "Error conectando al repositorio ${git_url} ...",
                                                           JOB_NAME,
                                                           author,
                                                           testSummary,
                                                           message,
                                                           failedTestsString,
                                                           "",
                                                           "",
                                                           "")
						} // fin try - catch
				} // fin script
	   		} // fin steps
		} // fin stage(setup)

  		stage('build') {
   			steps {
                            script {
                                    try {
					sh "mvn compile -f adf_proxy1/pom.xml -Dmaven.test.failure.ignore=true -U -Denv=${params.ENVIRONMENT}"
                                    } catch (err) {
                                            buildColor = BUILD_COLOR_DANGER
                                            notification("slack",
                                                         "Failure: " + err,
                                                         "danger",
                                                         "Error compilando el proyecto ...",
                                                         JOB_NAME,
                                                         author,
                                                         testSummary,
                                                         message,
                                                         failedTestsString,
                                                         "",
                                                         "",
                                                         "")
                                    } // fin try - catch
                            }// fin script
			}// fin steps
  		} // fin stage(build)

		stage('test') {
			parallel {
				stage('ut-test') {
					steps {
						script {
                                                        try {
                                                                sh "mvn test -f adf_proxy1/pom.xml -DskipITs=true -Denv=${params.ENVIRONMENT}"
                                                        } catch (err) {
                                                                buildColor = BUILD_COLOR_DANGER
                                                                notification("slack",
                                                                            currentBuild.result,
                                                                            "danger",
                                                                            "Error ejecutando las pruebas unitarias ...",
                                                                            JOB_NAME,
                                                                            author,
                                                                            testSummary,
                                                                            message,
                                                                            failedTestsString,
                                                                            "",
                                                                            "",
                                                                            "")
                                                        } // fin try - catch
						}// fin script
					}// fin steps
				}// fin stage ('ut-test')

				stage('it-test') {
					steps {
						script {
                                                        try {
                                                                sh "mvn integration-test -f adf_proxy1/pom.xml -DskipUTs=true -Denv=${params.ENVIRONMENT}"
                                                        } catch (err) {
                                                                buildColor = BUILD_COLOR_DANGER
                                                                notification("slack",
                                                                             currentBuild.result,
                                                                             "danger",
                                                                             "Error ejecutando las pruebas de integracion ...",
                                                                             JOB_NAME,
                                                                             author,
                                                                             testSummary,
                                                                             message,
                                                                             failedTestsString,
                                                                             "",
                                                                             "",
                                                                             "")
                                                        } // fin try - catch
						}// fin script
					}// fin step
				}// fin stage ('it-test')
			}// fin parallel
  		} // fin stage(test)


  		stage('reports') {
			parallel {
				stage('ut_report') {
					steps {
						junit 'adf_proxy1/target/surefire-reports/*.xml'
					}// fin steps
				}// fin stage ('ut-report')
			}// fin parallel
		} // fin stage(reports)

		stage('code_analisis') {
			steps {
				script {
					try {
						sh "mvn clean verify -f adf_proxy1/pom.xml -P sonar -Denv=${params.ENVIRONMENT}"                                                
					} catch (err) {
						buildColor = BUILD_COLOR_DANGER
						notification("slack",
                                                             currentBuild.result,
                                                             "danger",
                                                             "Error ejecutando el analisis estatico de codigo con sonar ...",
                                                             JOB_NAME,
                                                             author,
                                                             testSummary,
                                                             message,
                                                             failedTestsString,
                                                             "",
                                                             "",
                                                             "")
					} // fin try - catch
				}// fin script
			}// fin steps
		} // fin stage(code_analisis)

		stage('archive') {
			steps {
				script {
					try {
                                                sh "mvn clean deploy -f adf_proxy1/pom.xml -Dmaven.test.skip=true -Denv=${params.ENVIRONMENT}"
					} catch (err) {
						buildColor = BUILD_COLOR_DANGER
						notification("slack",
                                                             currentBuild.result,
                                                             "danger",
                                                             "Error ejecutando cargando los artefactos al repositorio ...",
                                                             JOB_NAME,
                                                             author,
                                                             testSummary,
                                                             message,
                                                             failedTestsString,
                                                             "",
                                                             "",
                                                             "")
					} // fin try - catch   
				}
			}
		} // fin stage(archive)

		//stage('notification') {

		//} // fin stage(notification)				
 	} // fin stages	

	post {
		always {
			echo "Build completed. currentBuild.result = ${currentBuild.result}"
		}// fin always

		//aborted {}

		success {
			script {
				if (currentBuild.result == 'SUCCESS') {
                                      testSummary = getTestSummary()
                                      notification("slack",
                                                    BUILD_STATUS_SUCCESS,
                                                    BUILD_COLOR_GOOD,
                                                    "El proceso de automatizacion ha terminado correctamente ...",
                                                    JOB_NAME,
                                                    author,
                                                    testSummary,
                                                    message,
                                                    failedTestsString,
                                                    "",
                                                    "",
                                                    "")
				}// fin if
			}// fin script
		}// fin success

		//unstable {}

		failure {
			script {
				if (currentBuild.result == 'FAILURE') {
                                    testSummary = getTestSummary()
				    notification("slack",
                                                      "Failure",
                                                      BUILD_COLOR_DANGER,
                                                      "El proceso de automatizacion ha terminado erroneamente ...",
                                                      JOB_NAME,
                                                      author,
                                                      testSummary,
                                                      message,
                                                      failedTestsString,
                                                      "",
                                                      "",
                                                      "")
				}// fin if
			}// fin script
		}// fin failure
	}// fin post
} // fin pipeline